<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:sys="clr-namespace:System;assembly=mscorlib"
                 xmlns:beh="clr-namespace:Harp.Behavior;assembly=Harp.Behavior"
                 xmlns:harp="clr-namespace:Bonsai.Harp;assembly=Bonsai.Harp"
                 xmlns:gl="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders"
                 xmlns:gli="clr-namespace:Bonsai.Shaders.Input;assembly=Bonsai.Shaders"
                 xmlns:aeon="clr-namespace:Aeon.Acquisition;assembly=Aeon.Acquisition"
                 xmlns:spk="clr-namespace:Bonsai.Spinnaker;assembly=Bonsai.Spinnaker"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:dsp="clr-namespace:Bonsai.Dsp;assembly=Bonsai.Dsp"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="GroupWorkflow">
        <Name>LED control</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="rx:BehaviorSubject" TypeArguments="sys:Object">
              <rx:Name>Start_LEDs</rx:Name>
            </Expression>
            <Expression xsi:type="beh:CreateMessage">
              <harp:MessageType>Write</harp:MessageType>
              <harp:Payload xsi:type="beh:CreateOutputSetPayload">
                <beh:OutputSet>DO3</beh:OutputSet>
              </harp:Payload>
            </Expression>
            <Expression xsi:type="MulticastSubject">
              <Name>BehaviorCommands</Name>
            </Expression>
            <Expression xsi:type="rx:BehaviorSubject" TypeArguments="sys:Object">
              <rx:Name>Stop_LEDs</rx:Name>
            </Expression>
            <Expression xsi:type="beh:CreateMessage">
              <harp:MessageType>Write</harp:MessageType>
              <harp:Payload xsi:type="beh:CreateOutputClearPayload">
                <beh:OutputClear>DO3</beh:OutputClear>
              </harp:Payload>
            </Expression>
            <Expression xsi:type="MulticastSubject">
              <Name>BehaviorCommands</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:Timer">
                <gl:DueTime>PT0S</gl:DueTime>
              </Combinator>
            </Expression>
            <Expression xsi:type="MulticastSubject">
              <Name>Start_LEDs</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gli:KeyDown">
                <gli:Key>J</gli:Key>
                <gli:Modifiers xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="MulticastSubject">
              <Name>Stop_LEDs</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gli:KeyDown">
                <gli:Key>H</gli:Key>
                <gli:Modifiers xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="MulticastSubject">
              <Name>Start_LEDs</Name>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>BehaviourBoard</Name>
        <Description />
        <Workflow>
          <Nodes>
            <Expression xsi:type="rx:BehaviorSubject" TypeArguments="harp:HarpMessage">
              <rx:Name>BehaviorCommands</rx:Name>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="PortName" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="harp:Device">
                <harp:OperationMode>Active</harp:OperationMode>
                <harp:OperationLed>On</harp:OperationLed>
                <harp:DumpRegisters>true</harp:DumpRegisters>
                <harp:VisualIndicators>On</harp:VisualIndicators>
                <harp:Heartbeat>Disabled</harp:Heartbeat>
                <harp:IgnoreErrors>false</harp:IgnoreErrors>
                <harp:PortName>COM2</harp:PortName>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:PublishSubject">
              <Name>BehaviorEvents</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="2" Label="Source1" />
            <Edge From="1" To="2" Label="Source2" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>Spinnaker3</Name>
        <Description />
        <Workflow>
          <Nodes>
            <Expression xsi:type="SubscribeSubject">
              <Name>BehaviorEvents</Name>
            </Expression>
            <Expression xsi:type="beh:Parse">
              <harp:Register xsi:type="beh:TimestampedCamera1Frame" />
            </Expression>
            <Expression xsi:type="rx:PublishSubject">
              <Name>FrameEvents2</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FrameEvents2</Name>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="SerialNumber" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="aeon:SpinnakerCapture">
                <spk:Index xsi:nil="true" />
                <spk:SerialNumber>23534425</spk:SerialNumber>
                <spk:ColorProcessing>Default</spk:ColorProcessing>
                <aeon:ExposureTime>9000</aeon:ExposureTime>
                <aeon:Gain>0</aeon:Gain>
                <aeon:Binning>2</aeon:Binning>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:ObserveOn">
                <rx:Scheduler>TaskPoolScheduler</rx:Scheduler>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:PublishSubject">
              <Name>Spinnaker3FrameEvents</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source2" />
            <Edge From="3" To="5" Label="Source1" />
            <Edge From="4" To="5" Label="Source2" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>Tracking</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="SubscribeSubject">
              <Name>Spinnaker3FrameEvents</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Value.Image</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Crop">
                <cv:RegionOfInterest>
                  <cv:X>42</cv:X>
                  <cv:Y>175</cv:Y>
                  <cv:Width>263</cv:Width>
                  <cv:Height>258</cv:Height>
                </cv:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:WarpPerspective">
                <cv:Source>
                  <cv:Point2f>
                    <cv:X>22.1906242</cv:X>
                    <cv:Y>17.758112</cv:Y>
                  </cv:Point2f>
                  <cv:Point2f>
                    <cv:X>17.5333328</cv:X>
                    <cv:Y>239.734512</cv:Y>
                  </cv:Point2f>
                  <cv:Point2f>
                    <cv:X>235.604172</cv:X>
                    <cv:Y>253.179947</cv:Y>
                  </cv:Point2f>
                  <cv:Point2f>
                    <cv:X>241.905212</cv:X>
                    <cv:Y>15.2212391</cv:Y>
                  </cv:Point2f>
                </cv:Source>
                <cv:Destination>
                  <cv:Point2f>
                    <cv:X>0</cv:X>
                    <cv:Y>0</cv:Y>
                  </cv:Point2f>
                  <cv:Point2f>
                    <cv:X>0</cv:X>
                    <cv:Y>277</cv:Y>
                  </cv:Point2f>
                  <cv:Point2f>
                    <cv:X>256</cv:X>
                    <cv:Y>277</cv:Y>
                  </cv:Point2f>
                  <cv:Point2f>
                    <cv:X>256</cv:X>
                    <cv:Y>0</cv:Y>
                  </cv:Point2f>
                </cv:Destination>
                <cv:Flags>Linear</cv:Flags>
                <cv:FillValue>
                  <cv:Val0>0</cv:Val0>
                  <cv:Val1>0</cv:Val1>
                  <cv:Val2>0</cv:Val2>
                  <cv:Val3>0</cv:Val3>
                </cv:FillValue>
              </Combinator>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>ColorTracking</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="dsp:Split" />
                  </Expression>
                  <Expression xsi:type="GroupWorkflow">
                    <Name>BlobTracking</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="Selector" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Item1</Selector>
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="Selector" DisplayName="OtherChanel1" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Item2</Selector>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="rx:Zip" />
                        </Expression>
                        <Expression xsi:type="Subtract" />
                        <Expression xsi:type="Disable">
                          <Builder xsi:type="Combinator">
                            <Combinator xsi:type="rx:Zip" />
                          </Builder>
                        </Expression>
                        <Expression xsi:type="Disable">
                          <Builder xsi:type="Subtract" />
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="ThresholdValue" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:Threshold">
                            <cv:ThresholdValue>0</cv:ThresholdValue>
                            <cv:MaxValue>255</cv:MaxValue>
                            <cv:ThresholdType>Binary</cv:ThresholdType>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="MinArea" />
                          <Property Name="MaxArea" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:FindContours">
                            <cv:Mode>External</cv:Mode>
                            <cv:Method>ChainApproxNone</cv:Method>
                            <cv:Offset>
                              <cv:X>0</cv:X>
                              <cv:Y>0</cv:Y>
                            </cv:Offset>
                            <cv:MinArea>150</cv:MinArea>
                            <cv:MaxArea xsi:nil="true" />
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:BinaryRegionAnalysis" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:LargestBinaryRegion" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Centroid</Selector>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="2" Label="Source1" />
                        <Edge From="0" To="4" Label="Source1" />
                        <Edge From="1" To="2" Label="Source2" />
                        <Edge From="2" To="5" Label="Source1" />
                        <Edge From="3" To="4" Label="Source2" />
                        <Edge From="4" To="5" Label="Source2" />
                        <Edge From="5" To="6" Label="Source1" />
                        <Edge From="6" To="7" Label="Source1" />
                        <Edge From="7" To="8" Label="Source1" />
                        <Edge From="8" To="10" Label="Source1" />
                        <Edge From="9" To="10" Label="Source2" />
                        <Edge From="10" To="12" Label="Source1" />
                        <Edge From="11" To="12" Label="Source2" />
                        <Edge From="12" To="13" Label="Source1" />
                        <Edge From="13" To="14" Label="Source1" />
                        <Edge From="14" To="15" Label="Source1" />
                        <Edge From="15" To="16" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="GroupWorkflow">
                    <Name>BlobTracking</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="Selector" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Item2</Selector>
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="Selector" DisplayName="OtherChanel1" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Item3</Selector>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="rx:Zip" />
                        </Expression>
                        <Expression xsi:type="Subtract" />
                        <Expression xsi:type="Disable">
                          <Builder xsi:type="Combinator">
                            <Combinator xsi:type="rx:Zip" />
                          </Builder>
                        </Expression>
                        <Expression xsi:type="Disable">
                          <Builder xsi:type="Subtract" />
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="ThresholdValue" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:Threshold">
                            <cv:ThresholdValue>30</cv:ThresholdValue>
                            <cv:MaxValue>255</cv:MaxValue>
                            <cv:ThresholdType>Binary</cv:ThresholdType>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="MinArea" />
                          <Property Name="MaxArea" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:FindContours">
                            <cv:Mode>External</cv:Mode>
                            <cv:Method>ChainApproxNone</cv:Method>
                            <cv:Offset>
                              <cv:X>0</cv:X>
                              <cv:Y>0</cv:Y>
                            </cv:Offset>
                            <cv:MinArea>180</cv:MinArea>
                            <cv:MaxArea xsi:nil="true" />
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:BinaryRegionAnalysis" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:LargestBinaryRegion" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Centroid</Selector>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="2" Label="Source1" />
                        <Edge From="0" To="4" Label="Source1" />
                        <Edge From="1" To="2" Label="Source2" />
                        <Edge From="2" To="5" Label="Source1" />
                        <Edge From="3" To="4" Label="Source2" />
                        <Edge From="4" To="5" Label="Source2" />
                        <Edge From="5" To="6" Label="Source1" />
                        <Edge From="6" To="7" Label="Source1" />
                        <Edge From="7" To="8" Label="Source1" />
                        <Edge From="8" To="10" Label="Source1" />
                        <Edge From="9" To="10" Label="Source2" />
                        <Edge From="10" To="12" Label="Source1" />
                        <Edge From="11" To="12" Label="Source2" />
                        <Edge From="12" To="13" Label="Source1" />
                        <Edge From="13" To="14" Label="Source1" />
                        <Edge From="14" To="15" Label="Source1" />
                        <Edge From="15" To="16" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="GroupWorkflow">
                    <Name>BlobTracking</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="Selector" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Item3</Selector>
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="Selector" DisplayName="OtherChanel1" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Item2</Selector>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="rx:Zip" />
                        </Expression>
                        <Expression xsi:type="Subtract" />
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="Selector" DisplayName="OtherChannel2" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Item1</Selector>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="rx:Zip" />
                        </Expression>
                        <Expression xsi:type="Subtract" />
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="ThresholdValue" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:Threshold">
                            <cv:ThresholdValue>64</cv:ThresholdValue>
                            <cv:MaxValue>255</cv:MaxValue>
                            <cv:ThresholdType>Binary</cv:ThresholdType>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="MinArea" />
                          <Property Name="MaxArea" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:FindContours">
                            <cv:Mode>External</cv:Mode>
                            <cv:Method>ChainApproxNone</cv:Method>
                            <cv:Offset>
                              <cv:X>0</cv:X>
                              <cv:Y>0</cv:Y>
                            </cv:Offset>
                            <cv:MinArea>250</cv:MinArea>
                            <cv:MaxArea xsi:nil="true" />
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:BinaryRegionAnalysis" />
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="cv:LargestBinaryRegion" />
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Centroid</Selector>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="2" Label="Source1" />
                        <Edge From="0" To="4" Label="Source1" />
                        <Edge From="0" To="8" Label="Source1" />
                        <Edge From="1" To="2" Label="Source2" />
                        <Edge From="2" To="5" Label="Source1" />
                        <Edge From="3" To="4" Label="Source2" />
                        <Edge From="4" To="5" Label="Source2" />
                        <Edge From="5" To="6" Label="Source1" />
                        <Edge From="6" To="9" Label="Source1" />
                        <Edge From="7" To="8" Label="Source2" />
                        <Edge From="8" To="9" Label="Source2" />
                        <Edge From="9" To="10" Label="Source1" />
                        <Edge From="10" To="12" Label="Source1" />
                        <Edge From="11" To="12" Label="Source2" />
                        <Edge From="12" To="14" Label="Source1" />
                        <Edge From="13" To="14" Label="Source2" />
                        <Edge From="14" To="15" Label="Source1" />
                        <Edge From="15" To="16" Label="Source1" />
                        <Edge From="16" To="17" Label="Source1" />
                        <Edge From="17" To="18" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Zip" />
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="Disable">
                    <Builder xsi:type="Combinator">
                      <Combinator xsi:type="rx:BufferTime">
                        <rx:TimeSpan>PT1S</rx:TimeSpan>
                      </Combinator>
                    </Builder>
                  </Expression>
                  <Expression xsi:type="Disable">
                    <Builder xsi:type="MemberSelector">
                      <Selector>Count</Selector>
                    </Builder>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="1" To="3" Label="Source1" />
                  <Edge From="1" To="4" Label="Source1" />
                  <Edge From="1" To="5" Label="Source4" />
                  <Edge From="2" To="5" Label="Source1" />
                  <Edge From="3" To="5" Label="Source2" />
                  <Edge From="4" To="5" Label="Source3" />
                  <Edge From="5" To="6" Label="Source1" />
                  <Edge From="5" To="7" Label="Source1" />
                  <Edge From="7" To="8" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Seconds</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="harp:CreateTimestamped" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Skip">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:BehaviorSubject">
              <Name>CurrCoords</Name>
            </Expression>
            <Expression xsi:type="rx:SelectMany">
              <Name>CreateArray</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Take">
                      <rx:Count>1</rx:Count>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="rx:AsyncSubject">
                    <Name>Value</Name>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>Value</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Value.Item1</Selector>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>Value</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Value.Item2</Selector>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>Value</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Value.Item3</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Merge" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:ToArray" />
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="4" To="9" Label="Source1" />
                  <Edge From="5" To="6" Label="Source1" />
                  <Edge From="6" To="9" Label="Source2" />
                  <Edge From="7" To="8" Label="Source1" />
                  <Edge From="8" To="9" Label="Source3" />
                  <Edge From="9" To="10" Label="Source1" />
                  <Edge From="10" To="11" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:MinimumEnclosingCircle" />
            </Expression>
            <Expression xsi:type="rx:BehaviorSubject" />
            <Expression xsi:type="MemberSelector">
              <Selector>Center</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Skip">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>centre</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>OriginCoord</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="rx:PublishSubject">
              <Name>camFootage</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:WithLatestFrom" />
            </Expression>
            <Expression xsi:type="rx:PublishSubject">
              <Name>WarpSpinnaker</Name>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="0" To="5" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="1" To="19" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="3" To="20" Label="Source1" />
            <Edge From="4" To="6" Label="Source1" />
            <Edge From="5" To="6" Label="Source2" />
            <Edge From="5" To="20" Label="Source2" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="7" To="17" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="11" To="12" Label="Source1" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="13" To="14" Label="Source1" />
            <Edge From="13" To="15" Label="Source1" />
            <Edge From="15" To="16" Label="Source1" />
            <Edge From="17" To="18" Label="Source1" />
            <Edge From="20" To="21" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>OrientationCalc</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="SubscribeSubject">
              <Name>CurrCoords</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>OriginCoord</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Value</Selector>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>centre</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:WithLatestFrom" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Script>from math import atan2, degrees, isnan, pi
from System import Tuple

@returns(Tuple[Tuple[float, float, float],float])
def process(value):

    # Current xy coordinates of each point
    current_points = [(value.Item1.Value.Item1.X, value.Item1.Value.Item1.Y),
                      (value.Item1.Value.Item2.X, value.Item1.Value.Item2.Y),
                      (value.Item1.Value.Item3.X, value.Item1.Value.Item3.Y)]

    # 90 degree xy coordinates of each point (hard code)
    #Ninety_points = [(X, Y), 
                       #(X, Y), 
                       #(X, Y)]

    # Original fixed xy coordinates of each point
    #original_points = [(value.Item2.Item1.Item1.X, value.Item2.Item1.Item1.Y), 
                       #(value.Item2.Item1.Item2.X, value.Item2.Item1.Item2.Y), 
                       #(value.Item2.Item1.Item3.X, value.Item2.Item1.Item3.Y)]
    
    #hard coded zero coords
    original_points = [(208.7271, 183.3633), 
                       (143.1053, 19.86623), 
                       (41.03605, 167.7879)]

    

    # Center of the circle
    #centreX, centreY = (value.Item2.Item2.X, value.Item2.Item2.Y)

    #hard code centre
    centreX, centreY = (131, 125)

    # Initialize a list to store the angles for each point
    angles = []

    # Calculate angle for each point
    for i, (x, y) in enumerate(current_points):
        # Check if any of the input values are NaN
        if isnan(x) or isnan(y):
            angles.append(float('nan'))  # Append NaN if any input value is NaN
            continue

        # Calculate displacement vector from center to current point
        dx = x - centreX
        dy = y - centreY

        # Calculate displacement vector from center to original point
        orig_x, orig_y = original_points[i]
        orig_dx = orig_x - centreX
        orig_dy = orig_y - centreY

        # Calculate displacement vector from center to 90 degree points
        ##Ninety_x, Ninety_y = original_points[i]
        ##Ninety_dx = Ninety_x - centreX
        ##Ninety_dy = Ninety_y - centreY

        # Calculate the angle in radians (clockwise)
        angle = atan2(dy, dx) - atan2(orig_dy, orig_dx)

        # Calculate the 90 degree angle in radians (clockwise)
        ##Ninety_angle = atan2(dy, dx) - atan2(Ninety_dy, Ninety_dx)
        ##Ninety_angle = Ninety_angle - (pi / 2)

        # average of two calculations
        ##angle = (Ninety_angle * angle) / 2

        # Convert angle from radians to degrees
        #angle_degrees = degrees(angle)

        # Ensure angle is between 0 and 360 degrees
        #if angle_degrees &lt; 0:
            #angle_degrees += 360

        #angles.append(angle_degrees)

        # Ensure angle is between -pi and +pi radians (360 degrees) degrees
        if angle &lt; -pi:
            angle += 2 * pi
        elif angle &gt; pi:
            angle -= 2 * pi
    
        angles.append(angle)

    # If the coords of blue and green lights are almost the same, nullify the blue angle
    if abs(current_points[0][0] - current_points[1][0]) &lt; 10 or abs(current_points[0][1] - current_points[1][1]) &lt; 10:
        angles[0] = float('nan')



    # Return the angles for each point as a tuple
    return Tuple.Create(Tuple.Create(angles[0], angles[1], angles[2]), value.Item1.Seconds)

</ipy:Script>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Script>from math import isnan, atan2, sin, cos
from System import Tuple

# Initialize variables for exponential smoothing
prev_avg_angle = None
alpha = 0.8  # Smoothing factor, adjust as needed


@returns(Tuple[float, float, float, float, float])
def process(value):
    
    #global LastEntry
    global prev_avg_angle


    # Angles of movement
    LED_angles = [value.Item1.Item1, value.Item1.Item2, value.Item1.Item3]

    # Filter out NaN values from LED_angles
    valid_angles = [angle for angle in LED_angles if not isnan(angle)]

    # Filter out large discrepancies (stop averaging of single angle outlier errors)
    consistent_angles = []
    if len(valid_angles) == 1: 
        consistent_angles.extend(valid_angles) # if only one LED is being picked up then there ca't be discrepancies
    elif len(valid_angles) == 2: 
        if abs(valid_angles[0] - valid_angles[1]) &lt;= 1:  # if there are two LEDs and there is discrepancy
            consistent_angles.extend([valid_angles[0]]) # quick fix...just stick with the first one so that the average isn't dramatically shifted when differences change between -3 radians to +3
        else:
            consistent_angles.extend(valid_angles)
    else:
        for angle in valid_angles:
        # Check to see if angle is within ±1 radian of at least one of the other angles
            if any(abs(angle - other_angle) &lt;= 1 for other_angle in valid_angles if other_angle != angle):
                consistent_angles.append(angle)
    consistent_angles = valid_angles

    # Calculate the average of valid consistent angles
    if len(consistent_angles) == 1:
        # Apply exponential smoothing if there's only one or two consistent angle so the overall average doesn't instantly jump
        if prev_avg_angle is None:
            avg_angle = consistent_angles[0]
        else:
            avg_angle = alpha * consistent_angles[0] + (1 - alpha) * prev_avg_angle
        prev_avg_angle = avg_angle

    elif len(consistent_angles) == 2:
        sin_sum = sum(sin(angle) for angle in consistent_angles)
        cos_sum = sum(cos(angle) for angle in consistent_angles)
        two_avg = atan2(sin_sum, cos_sum)
        if prev_avg_angle is None:
            avg_angle = two_avg
        else:
            avg_angle = alpha * two_avg + (1 - alpha) * prev_avg_angle
        prev_avg_angle = avg_angle

    elif len(consistent_angles) == 3:
        sin_sum = sum(sin(angle) for angle in consistent_angles)
        cos_sum = sum(cos(angle) for angle in consistent_angles)
        avg_angle = atan2(sin_sum, cos_sum)
        prev_avg_angle = avg_angle
    else:
        avg_angle = float('nan')

    avg_angle = avg_angle*-1

    # Return the average angle as a tuple
    return Tuple.Create(avg_angle, value.Item2, LED_angles[0], LED_angles[1], LED_angles[2])

</ipy:Script>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="rx:BehaviorSubject">
              <Name>OrientationAngle</Name>
            </Expression>
            <Expression xsi:type="rx:PublishSubject">
              <Name>Orientation</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>OrientationAngle</Name>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>AngleDegrees</ipy:Name>
              <ipy:Script>from math import atan2, degrees
from System import Tuple


@returns(float)
def process(value):
    radians = value
    angle_degrees = degrees(radians)
    if angle_degrees &lt; 0:
        angle_degrees += 360
    return angle_degrees

</ipy:Script>
            </Expression>
            <Expression xsi:type="rx:PublishSubject">
              <Name>OrientationDegrees</Name>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="5" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="4" Label="Source1" />
            <Edge From="3" To="4" Label="Source2" />
            <Edge From="4" To="5" Label="Source2" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="7" To="10" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="13" To="14" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges />
  </Workflow>
</WorkflowBuilder>