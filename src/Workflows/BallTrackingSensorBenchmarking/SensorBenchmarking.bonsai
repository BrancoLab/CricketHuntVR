<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.6.3"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:harp="clr-namespace:Bonsai.Harp;assembly=Bonsai.Harp"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:p1="clr-namespace:Bonsai.Harp.CF;assembly=Bonsai.Harp.CF"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:scr="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting"
                 xmlns:gl="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders"
                 xmlns:gli="clr-namespace:Bonsai.Shaders.Input;assembly=Bonsai.Shaders"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="GroupWorkflow">
        <Name>Photodiode</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="SubscribeSubject">
              <Name>Events</Name>
            </Expression>
            <Expression xsi:type="harp:Parse">
              <harp:Type>TimestampedS16</harp:Type>
              <harp:IsArray>false</harp:IsArray>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Seconds</Selector>
            </Expression>
            <Expression xsi:type="BehaviorSubject">
              <Name>TimestampStream</Name>
            </Expression>
            <Expression xsi:type="Sink">
              <Name>LogHere</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="1" To="4" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>ArduinoSensor</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="io:CreateSerialPort">
                <io:Name>OpticalFlow</io:Name>
                <io:PortName>COM5</io:PortName>
                <io:BaudRate>57600</io:BaudRate>
                <io:Parity>None</io:Parity>
                <io:ParityReplace>63</io:ParityReplace>
                <io:DataBits>8</io:DataBits>
                <io:StopBits>One</io:StopBits>
                <io:Handshake>None</io:Handshake>
                <io:DiscardNull>false</io:DiscardNull>
                <io:DtrEnable>true</io:DtrEnable>
                <io:RtsEnable>false</io:RtsEnable>
                <io:ReadBufferSize>4096</io:ReadBufferSize>
                <io:WriteBufferSize>2048</io:WriteBufferSize>
                <io:ReceivedBytesThreshold>1</io:ReceivedBytesThreshold>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>startacq</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="io:SerialStringRead">
                <io:PortName>OpticalFlow</io:PortName>
                <io:NewLine>\n</io:NewLine>
              </Combinator>
            </Expression>
            <Expression xsi:type="Parse">
              <Pattern>%i %i</Pattern>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Retry" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>TimestampStream</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:WithLatestFrom" />
            </Expression>
            <Expression xsi:type="Sink">
              <Name>LogHere</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:TimeInterval" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Interval.TotalMilliseconds</Selector>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Events</Name>
            </Expression>
            <Expression xsi:type="p1:BehaviorEvent">
              <p1:Type>Input</p1:Type>
              <p1:Mask>Poke0InfraRedBeam</p1:Mask>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:WithLatestFrom" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="harp:Parse">
              <harp:Type>TimestampedU8</harp:Type>
              <harp:IsArray>false</harp:IsArray>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Seconds</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Sink">
              <Name>LogHere</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="4" To="9" Label="Source1" />
            <Edge From="5" To="7" Label="Source1" />
            <Edge From="6" To="7" Label="Source2" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="12" To="14" Label="Source2" />
            <Edge From="13" To="14" Label="Source1" />
            <Edge From="14" To="15" Label="Source1" />
            <Edge From="14" To="18" Label="Source1" />
            <Edge From="15" To="16" Label="Source1" />
            <Edge From="16" To="17" Label="Source1" />
            <Edge From="17" To="19" Label="Source1" />
            <Edge From="18" To="19" Label="Source2" />
            <Edge From="19" To="20" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>CameraOpticflow</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FileCapture">
                <cv:FileName>C:\Users\neurogears\Downloads\sample.mp4</cv:FileName>
                <cv:PlaybackRate>0</cv:PlaybackRate>
                <cv:StartPosition>0</cv:StartPosition>
                <cv:PositionUnits>Frames</cv:PositionUnits>
                <cv:Loop>true</cv:Loop>
                <cv:Playing>false</cv:Playing>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:DistinctUntilChanged" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Grayscale" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Crop">
                <cv:RegionOfInterest>
                  <cv:X>61</cv:X>
                  <cv:Y>140</cv:Y>
                  <cv:Width>95</cv:Width>
                  <cv:Height>83</cv:Height>
                </cv:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Flip">
                <cv:Mode>Vertical</cv:Mode>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Threshold">
                <cv:ThresholdValue>162</cv:ThresholdValue>
                <cv:MaxValue>255</cv:MaxValue>
                <cv:ThresholdType>Binary</cv:ThresholdType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:GoodFeaturesToTrack">
                <cv:MaxFeatures>100</cv:MaxFeatures>
                <cv:QualityLevel>0.01</cv:QualityLevel>
                <cv:MinDistance>0.1</cv:MinDistance>
                <cv:RegionOfInterest>
                  <cv:X>0</cv:X>
                  <cv:Y>0</cv:Y>
                  <cv:Width>0</cv:Width>
                  <cv:Height>0</cv:Height>
                </cv:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:SparseOpticalFlow">
                <cv:WindowSize>
                  <cv:Width>31</cv:Width>
                  <cv:Height>31</cv:Height>
                </cv:WindowSize>
                <cv:Level>3</cv:Level>
                <cv:MaxError xsi:nil="true" />
                <cv:MaxIterations>20</cv:MaxIterations>
                <cv:Epsilon>0.03</cv:Epsilon>
              </Combinator>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>import clr
clr.AddReference("OpenCV.Net")
clr.AddReference("Bonsai.Vision")
from System import Tuple
from OpenCV.Net import CV, Scalar, Size, Point2f
from Bonsai.Vision import KeyPointCollection
from math import sin, cos, pi, isnan, sqrt, atan2



# clr.AddReference("Bonsai.Vision")
# from Bonsai.Vision import ConnectedComponent
# from OpenCV.Net import *



#@returns(Tuple[Point2f,float])
@returns(Tuple[float,float,float])
def process(value):
  previous = value.PreviousKeyPoints
  current = value.CurrentKeyPoints
  TotalDisplacement = Point2f(0.0,0.0)
  TotalDisplacementX = 0.0
  TotalDisplacementY = 0.0
  TotalRotation = 0.0

  for cur,prev in zip(current,previous):
    TotalDisplacementX += (cur.X - prev.X)
    TotalDisplacementY += (cur.Y - prev.Y)

    Displacement = cur - prev
    TotalDisplacement += Displacement

    Center = Point2f(current.Image.Width/2.0, current.Image.Height/2.0)

    # assuming rotation around the center of the image, another possibility would
    # be to offset the center taking in acount the displacement in X,Y
    cur2 = cur - Center
    prev2 = prev - Center
    TotalRotation += atan2(crossProduct(cur2,prev2), dotProduct(cur2,prev2))



  if (current.Count&gt; 0):
    TotalDisplacementX /= current.Count
    TotalDisplacementY /= current.Count
    TotalRotation /= current.Count

  TotalRotation *= 225

  return Tuple.Create(TotalDisplacementX,TotalDisplacementY,TotalRotation)




def mul(a,U):
  return Point2f(a*U.X,a*U.Y)


def norm(U):
  return (sqrt((U.X*U.X)+(U.Y*U.Y)))


def crossProduct(U,V):
  return (U.X*V.Y-U.Y*V.X)


def dotProduct(U,V):
  return (U.X*V.X+U.Y*V.Y)</scr:Script>
            </Expression>
            <Expression xsi:type="scr:ExpressionTransform">
              <scr:Expression>new(
it.Item1 as TotalDisplacementX,
it.Item2 as TotalDisplacementY,
it.Item3 as TotalRotation)</scr:Expression>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>MouseSensors</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:CreateWindow">
                <gl:Width>640</gl:Width>
                <gl:Height>480</gl:Height>
                <gl:VSync>On</gl:VSync>
                <gl:SwapSync>false</gl:SwapSync>
                <gl:ClearColor>Black</gl:ClearColor>
                <gl:ClearMask>DepthBufferBit ColorBufferBit</gl:ClearMask>
                <gl:CursorVisible>true</gl:CursorVisible>
                <gl:Location xsi:nil="true" />
                <gl:WindowBorder>Resizable</gl:WindowBorder>
                <gl:WindowState>Normal</gl:WindowState>
                <gl:DisplayDevice>Primary</gl:DisplayDevice>
                <gl:TargetRenderFrequency>120</gl:TargetRenderFrequency>
                <gl:TargetUpdateFrequency xsi:nil="true" />
                <gl:RenderState />
                <gl:GraphicsMode>
                  <gl:ColorFormat>
                    <gl:Red>8</gl:Red>
                    <gl:Green>8</gl:Green>
                    <gl:Blue>8</gl:Blue>
                    <gl:Alpha>8</gl:Alpha>
                  </gl:ColorFormat>
                  <gl:Depth>16</gl:Depth>
                  <gl:Stencil>0</gl:Stencil>
                  <gl:Samples>0</gl:Samples>
                  <gl:AccumulatorFormat>
                    <gl:Red>0</gl:Red>
                    <gl:Green>0</gl:Green>
                    <gl:Blue>0</gl:Blue>
                    <gl:Alpha>0</gl:Alpha>
                  </gl:AccumulatorFormat>
                  <gl:Buffers>2</gl:Buffers>
                  <gl:Stereo>false</gl:Stereo>
                </gl:GraphicsMode>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>TimestampStream</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gli:Mouse">
                <gli:Index>0</gli:Index>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>X,Y</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gli:Mouse">
                <gli:Index>1</gli:Index>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>X,Y</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Sink">
              <Name>LogHere</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="1" To="4" Label="Source1" />
            <Edge From="1" To="6" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="6" Label="Source2" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source3" />
            <Edge From="6" To="7" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="PublishSubject" TypeArguments="harp:HarpMessage">
        <Name>Commands</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="harp:Device">
          <harp:DeviceState>Active</harp:DeviceState>
          <harp:DumpRegisters>true</harp:DumpRegisters>
          <harp:LedState>On</harp:LedState>
          <harp:VisualIndicators>On</harp:VisualIndicators>
          <harp:Heartbeat>Disable</harp:Heartbeat>
          <harp:IgnoreErrors>false</harp:IgnoreErrors>
          <harp:PortName>COMx</harp:PortName>
        </Combinator>
      </Expression>
      <Expression xsi:type="PublishSubject">
        <Name>Events</Name>
      </Expression>
      <Expression xsi:type="Unit" />
      <Expression xsi:type="PublishSubject">
        <Name>startacq</Name>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="7" To="8" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>